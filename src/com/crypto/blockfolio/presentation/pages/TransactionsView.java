package com.crypto.blockfolio.presentation.pages;

import com.crypto.blockfolio.domain.dto.TransactionAddDto;
import com.crypto.blockfolio.persistence.entity.Portfolio;
import com.crypto.blockfolio.persistence.entity.TransactionType;
import com.crypto.blockfolio.presentation.ApplicationContext;
import java.math.BigDecimal;
import java.util.ArrayList;
import java.util.List;
import java.util.Scanner;
import java.util.UUID;

public class TransactionsView {

    private final Portfolio portfolio;
    private final Scanner scanner;

    public TransactionsView(UUID portfolioId) {
        this.portfolio = ApplicationContext.getPortfolioService().getPortfolioById(portfolioId);
        this.scanner = new Scanner(System.in);
    }

    /**
     * –í—ñ–¥–æ–±—Ä–∞–∂–∞—î —ñ–Ω—Ç–µ—Ä—Ñ–µ–π—Å –¥–ª—è —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è –Ω–æ–≤–æ—ó —Ç—Ä–∞–Ω–∑–∞–∫—Ü—ñ—ó. –ö–æ—Ä–∏—Å—Ç—É–≤–∞—á –º–æ–∂–µ –≤–∏–±—Ä–∞—Ç–∏ –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç—É,
     * —Ç–∏–ø —Ç—Ä–∞–Ω–∑–∞–∫—Ü—ñ—ó, –≤–≤–µ—Å—Ç–∏ –∫—ñ–ª—å–∫—ñ—Å—Ç—å, –≤–∏—Ç—Ä–∞—Ç–∏, –∫–æ–º—ñ—Å—ñ—é —Ç–∞ –¥–æ–¥–∞—Ç–∏ –æ–ø–∏—Å –ø–µ—Ä–µ–¥ –ø—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–Ω—è–º
     * —Ç—Ä–∞–Ω–∑–∞–∫—Ü—ñ—ó.
     */
    public void display() {
        String selectedCrypto = null;
        TransactionType transactionType = null;
        BigDecimal amount = BigDecimal.ZERO;
        BigDecimal costs = BigDecimal.ZERO;
        BigDecimal fees = BigDecimal.ZERO;
        String description = null;

        while (true) {
            System.out.println("\nüí± –°–¢–í–û–†–ï–ù–ù–Ø –ù–û–í–û–á –¢–†–ê–ù–ó–ê–ö–¶–Ü–á");
            System.out.println("‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ");
            System.out.printf("1. ü™ô –ö—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç–∞: %s%n",
                (selectedCrypto != null ? selectedCrypto : "‚ùå –ù–µ –≤–∏–±—Ä–∞–Ω–æ"));
            System.out.printf("2. üìù –¢–∏–ø –æ–ø–µ—Ä–∞—Ü—ñ—ó: %s%n",
                (transactionType != null ? transactionType : "‚ùå –ù–µ –≤–∏–±—Ä–∞–Ω–æ"));
            System.out.printf("3. üíé –ö—ñ–ª—å–∫—ñ—Å—Ç—å: %s%n", amount);
            System.out.printf("4. üí∞ –°—É–º–∞: %s USD%n", costs);
            System.out.printf("5. üí∏ –ö–æ–º—ñ—Å—ñ—è: %s USD%n", fees);
            System.out.printf("6. üìù –ö–æ–º–µ–Ω—Ç–∞—Ä: %s%n",
                (description != null ? description : "‚ùå –ù–µ –≤–∫–∞–∑–∞–Ω–æ"));
            System.out.println("7. ‚úÖ –ü—ñ–¥—Ç–≤–µ—Ä–¥–∏—Ç–∏ —Ç—Ä–∞–Ω–∑–∞–∫—Ü—ñ—é");
            System.out.println("0. üîô –ü–æ–≤–µ—Ä–Ω—É—Ç–∏—Å—è");
            System.out.print("‚ú® –û–±–µ—Ä—ñ—Ç—å –æ–ø—Ü—ñ—é: ");
            String input = scanner.nextLine().trim();

            switch (input) {
                case "0":
                    return;
                case "1":
                    selectedCrypto = selectCryptocurrency();
                    break;
                case "2":
                    transactionType = selectTransactionType();
                    break;
                case "3":
                    amount = inputBigDecimal("üíé –í–≤–µ–¥—ñ—Ç—å –∫—ñ–ª—å–∫—ñ—Å—Ç—å: ");
                    break;
                case "4":
                    costs = inputBigDecimal("üí∞ –í–≤–µ–¥—ñ—Ç—å —Å—É–º—É (USD): ");
                    break;
                case "5":
                    fees = inputBigDecimal("üí∏ –í–≤–µ–¥—ñ—Ç—å –∫–æ–º—ñ—Å—ñ—é (USD): ");
                    break;
                case "6":
                    System.out.print("üìù –î–æ–¥–∞–π—Ç–µ –∫–æ–º–µ–Ω—Ç–∞—Ä: ");
                    description = scanner.nextLine().trim();
                    break;
                case "7":
                    if (selectedCrypto == null || transactionType == null
                        || amount.compareTo(BigDecimal.ZERO) <= 0) {
                        System.out.println("‚ö†Ô∏è –ó–∞–ø–æ–≤–Ω—ñ—Ç—å —É—Å—ñ –æ–±–æ–≤'—è–∑–∫–æ–≤—ñ –ø–æ–ª—è");
                    } else {
                        createTransaction(selectedCrypto, transactionType, amount, costs, fees,
                            description);
                        return;
                    }
                    break;
                default:
                    System.out.print("‚ö†Ô∏è –ù–µ–∫–æ—Ä–µ–∫—Ç–Ω–∏–π –≤–∏–±—ñ—Ä. –°–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑: ");
            }
        }
    }

    private String selectCryptocurrency() {
        System.out.println("\nü™ô –û–ë–ï–†–Ü–¢–¨ –ö–†–ò–ü–¢–û–í–ê–õ–Æ–¢–£");
        System.out.println("‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ");
        List<String> cryptos = new ArrayList<>(portfolio.getBalances().keySet());
        for (int i = 0; i < cryptos.size(); i++) {
            System.out.printf("%d. üíé %s%n", i + 1, cryptos.get(i));
        }
        int choice = inputInt("‚ú® –í–∞—à –≤–∏–±—ñ—Ä: ");
        if (choice > 0 && choice <= cryptos.size()) {
            return cryptos.get(choice - 1);
        } else {
            System.out.print("‚ö†Ô∏è –ù–µ–∫–æ—Ä–µ–∫—Ç–Ω–∏–π –≤–∏–±—ñ—Ä. –°–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑: ");
            return null;
        }
    }

    private TransactionType selectTransactionType() {
        System.out.println("\nüìù –¢–ò–ü –¢–†–ê–ù–ó–ê–ö–¶–Ü–á");
        System.out.println("‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ");
        System.out.println("1. üì• –ö—É–ø—ñ–≤–ª—è");
        System.out.println("2. üì§ –ü—Ä–æ–¥–∞–∂");
        System.out.println("3. ‚¨áÔ∏è –ü–æ–ø–æ–≤–Ω–µ–Ω–Ω—è");
        System.out.println("4. ‚¨ÜÔ∏è –í–∏–≤–µ–¥–µ–Ω–Ω—è");
        int choice = inputInt("‚ú® –í–∞—à –≤–∏–±—ñ—Ä: ");
        return switch (choice) {
            case 1 -> TransactionType.BUY;
            case 2 -> TransactionType.SELL;
            case 3 -> TransactionType.TRANSFER_DEPOSIT;
            case 4 -> TransactionType.TRANSFER_WITHDRAWAL;
            default -> {
                System.out.print("‚ö†Ô∏è –ù–µ–∫–æ—Ä–µ–∫—Ç–Ω–∏–π –≤–∏–±—ñ—Ä (1-4). –°–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑: ");
                yield null;
            }
        };
    }

    private void createTransaction(String crypto, TransactionType type, BigDecimal amount,
        BigDecimal costs, BigDecimal fees, String description) {
        BigDecimal currentBalance = portfolio.getBalances().getOrDefault(crypto, BigDecimal.ZERO);

        switch (type) {
            case BUY, TRANSFER_DEPOSIT -> {
                portfolio.getBalances().put(crypto, currentBalance.add(amount));
                System.out.printf("‚úÖ –ë–∞–ª–∞–Ω—Å %s –∑–±—ñ–ª—å—à–µ–Ω–æ –Ω–∞ %.4f%n", crypto, amount);
            }
            case SELL, TRANSFER_WITHDRAWAL -> {
                if (currentBalance.compareTo(amount) < 0) {
                    System.out.println("‚ö†Ô∏è –ù–µ–¥–æ—Å—Ç–∞—Ç–Ω—å–æ –∫–æ—à—Ç—ñ–≤ –¥–ª—è –ø—Ä–æ–≤–µ–¥–µ–Ω–Ω—è –æ–ø–µ—Ä–∞—Ü—ñ—ó");
                    return;
                }
                portfolio.getBalances().put(crypto, currentBalance.subtract(amount));
                System.out.printf("‚úÖ –ë–∞–ª–∞–Ω—Å %s –∑–º–µ–Ω—à–µ–Ω–æ –Ω–∞ %.4f%n", crypto, amount);
            }
        }

        TransactionAddDto transactionAddDto = new TransactionAddDto(
            UUID.randomUUID(),  // –£–Ω—ñ–∫–∞–ª—å–Ω–∏–π ID —Ç—Ä–∞–Ω–∑–∞–∫—Ü—ñ—ó
            portfolio.getId(),  // ID –ø–æ—Ä—Ç—Ñ–µ–ª—è
            crypto,             // –°–∏–º–≤–æ–ª –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç–∏
            type,               // –¢–∏–ø —Ç—Ä–∞–Ω–∑–∞–∫—Ü—ñ—ó
            amount,             // –ö—ñ–ª—å–∫—ñ—Å—Ç—å
            costs,              // –í–∏—Ç—Ä–∞—Ç–∏
            fees,               // –ö–æ–º—ñ—Å—ñ—è
            description         // –û–ø–∏—Å
        );

        // –û–Ω–æ–≤–ª–µ–Ω–Ω—è –∑–∞–≥–∞–ª—å–Ω–æ—ó –≤–∞—Ä—Ç–æ—Å—Ç—ñ –ø–æ—Ä—Ç—Ñ–µ–ª—è
        ApplicationContext.getPortfolioService().calculateTotalValue(portfolio);
        ApplicationContext.getTransactionService().addTransaction(transactionAddDto);
        System.out.println("‚úÖ –¢—Ä–∞–Ω–∑–∞–∫—Ü—ñ—é —É—Å–ø—ñ—à–Ω–æ —Å—Ç–≤–æ—Ä–µ–Ω–æ!");
    }

    private BigDecimal inputBigDecimal(String prompt) {
        System.out.print(prompt + " ");
        while (true) {
            try {
                return new BigDecimal(scanner.nextLine().trim());
            } catch (NumberFormatException e) {
                System.out.print("‚ö†Ô∏è –ù–µ–∫–æ—Ä–µ–∫—Ç–Ω–µ –∑–Ω–∞—á–µ–Ω–Ω—è. –°–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑: ");
            }
        }
    }

    private int inputInt(String prompt) {
        System.out.print(prompt + " ");
        while (true) {
            try {
                return Integer.parseInt(scanner.nextLine().trim());
            } catch (NumberFormatException e) {
                System.out.print("‚ö†Ô∏è –ù–µ–∫–æ—Ä–µ–∫—Ç–Ω–µ –∑–Ω–∞—á–µ–Ω–Ω—è. –°–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑: ");
            }
        }
    }
}

