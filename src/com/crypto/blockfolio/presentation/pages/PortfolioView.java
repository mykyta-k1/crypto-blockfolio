package com.crypto.blockfolio.presentation.pages;

import com.crypto.blockfolio.domain.contract.AuthService;
import com.crypto.blockfolio.domain.contract.CryptocurrencyService;
import com.crypto.blockfolio.domain.contract.PortfolioService;
import com.crypto.blockfolio.domain.dto.PortfolioAddDto;
import com.crypto.blockfolio.persistence.entity.Cryptocurrency;
import com.crypto.blockfolio.persistence.entity.Portfolio;
import com.crypto.blockfolio.persistence.entity.User;
import com.crypto.blockfolio.persistence.repository.contracts.CryptocurrencyRepository;
import com.crypto.blockfolio.presentation.ApplicationContext;
import com.crypto.blockfolio.presentation.ViewService;
import java.math.BigDecimal;
import java.math.RoundingMode;
import java.util.ArrayList;
import java.util.Comparator;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;
import java.util.Scanner;
import java.util.Set;
import java.util.UUID;
import java.util.concurrent.CompletableFuture;
import java.util.concurrent.atomic.AtomicReference;
import java.util.stream.Collectors;

public class PortfolioView implements ViewService {

    private final PortfolioService portfolioService;
    private final AuthService authService;
    private final CryptocurrencyService cryptocurrencyService;
    private final CryptocurrencyRepository cryptocurrencyRepository;
    private final Scanner scanner;

    public PortfolioView() {
        this.portfolioService = ApplicationContext.getPortfolioService();
        this.authService = ApplicationContext.getAuthService();
        this.cryptocurrencyService = ApplicationContext.getCryptocurrencyService();
        this.cryptocurrencyRepository = ApplicationContext.getRepositoryFactory()
            .getCryptocurrencyRepository();
        this.scanner = new Scanner(System.in);
    }

    private void updateCryptocurrenciesFromApi() {
        try {
            List<Cryptocurrency> cryptocurrencies = cryptocurrencyService.getAllCryptocurrencies();
        } catch (Exception e) {
            System.err.println("‚ö†Ô∏è –ü–æ–º–∏–ª–∫–∞ –æ–Ω–æ–≤–ª–µ–Ω–Ω—è –¥–∞–Ω–∏—Ö: " + e.getMessage());
        }
    }

    /**
     * –í—ñ–¥–æ–±—Ä–∞–∂–∞—î –≥–æ–ª–æ–≤–Ω–µ –º–µ–Ω—é —É–ø—Ä–∞–≤–ª—ñ–Ω–Ω—è –ø–æ—Ä—Ç—Ñ–µ–ª—è–º–∏. –ü–µ—Ä–µ–≤—ñ—Ä—è—î –∞–≤—Ç–µ–Ω—Ç–∏—Ñ—ñ–∫–∞—Ü—ñ—é –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ —Ç–∞
     * –∑–∞–≤–∞–Ω—Ç–∞–∂—É—î –ø–æ—Ä—Ç—Ñ–µ–ª—ñ.
     */
    @Override
    public void display() {
        if (!authService.isAuthenticated()) {
            System.out.println("üîí –ù–µ–æ–±—Ö—ñ–¥–Ω–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü—ñ—è. –ü–æ–≤–µ—Ä–Ω–µ–Ω–Ω—è –¥–æ –≥–æ–ª–æ–≤–Ω–æ–≥–æ –º–µ–Ω—é...");
            return;
        }
        CompletableFuture<Void> asyncUpdate = CompletableFuture.runAsync(
            this::updateCryptocurrenciesFromApi);
        showMenu(asyncUpdate);
    }

    private void showMenu(CompletableFuture<Void> asyncUpdate) {
        while (true) {
            System.out.println("\nüíº –í–ê–®–Ü –ü–û–†–¢–§–ï–õ–Ü");
            System.out.println("‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ");
            System.out.println("0. üîô –ü–æ–≤–µ—Ä–Ω—É—Ç–∏—Å—è");
            System.out.println("‚ûï –°—Ç–≤–æ—Ä–∏—Ç–∏ –Ω–æ–≤–∏–π –ø–æ—Ä—Ç—Ñ–µ–ª—å");

            User currentUser = authService.getUser();
            List<Portfolio> portfolios = loadUserPortfolios(currentUser);

            if (portfolios.isEmpty()) {
                System.out.println("üì≠ –£ –≤–∞—Å –ø–æ–∫–∏ —â–æ –Ω–µ–º–∞—î –ø–æ—Ä—Ç—Ñ–µ–ª—ñ–≤");
            } else {
                for (int i = 0; i < portfolios.size(); i++) {
                    Portfolio portfolio = portfolios.get(i);
                    System.out.printf("%d. üíº %s üí∞ –í–∞—Ä—Ç—ñ—Å—Ç—å: $%.2f%n",
                        i + 1,
                        portfolio.getName(),
                        portfolio.getTotalValue());
                }
            }

            System.out.print("‚ú® –û–±–µ—Ä—ñ—Ç—å –æ–ø—Ü—ñ—é: ");
            String input = scanner.nextLine().trim();

            if (input.equals("0")) {
                System.out.println("üîÑ –ü–æ–≤–µ—Ä–Ω–µ–Ω–Ω—è –¥–æ –≥–æ–ª–æ–≤–Ω–æ–≥–æ –º–µ–Ω—é...");
                return;
            } else if (input.equals("+")) {
                createPortfolio(currentUser);
            } else {
                try {
                    int selectedIndex = Integer.parseInt(input) - 1;
                    if (selectedIndex >= 0 && selectedIndex < portfolios.size()) {
                        viewPortfolioDetails(portfolios.get(selectedIndex));
                    } else {
                        System.out.println("‚ö†Ô∏è –ü–æ–º–∏–ª–∫–∞: –ù–µ–≤—ñ—Ä–Ω–∏–π –≤–∏–±—ñ—Ä. –°–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑.");
                    }
                } catch (NumberFormatException e) {
                    System.out.println("‚ö†Ô∏è –ü–æ–º–∏–ª–∫–∞: –í–≤–µ–¥—ñ—Ç—å –Ω–æ–º–µ—Ä –∞–±–æ '+'.");
                }
            }

            if (asyncUpdate.isDone()) {
                System.out.println("üîÑ –î–∞–Ω—ñ –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç –æ–Ω–æ–≤–ª–µ–Ω–æ.");
            }
        }
    }

    private List<Cryptocurrency> readCryptocurrenciesFromFile() {
        return new ArrayList<>(cryptocurrencyRepository.findAll());
    }

    /**
     * –ó–∞–≤–∞–Ω—Ç–∞–∂—É—î —Å–ø–∏—Å–æ–∫ –ø–æ—Ä—Ç—Ñ–µ–ª—ñ–≤ –¥–ª—è –¥–∞–Ω–æ–≥–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞, –≤–∏–¥–∞–ª—è—é—á–∏ –Ω–µ–∫–æ—Ä–µ–∫—Ç–Ω—ñ –ø–æ—Å–∏–ª–∞–Ω–Ω—è.
     *
     * @param user –ø–æ—Ç–æ—á–Ω–∏–π –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á.
     * @return —Å–ø–∏—Å–æ–∫ –ø–æ—Ä—Ç—Ñ–µ–ª—ñ–≤ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞.
     */
    private List<Portfolio> loadUserPortfolios(User user) {
        List<UUID> validPortfolioIds = new ArrayList<>();
        List<Portfolio> portfolios = user.getPortfolios().stream()
            .map(portfolioId -> {
                try {
                    Portfolio portfolio = portfolioService.getPortfolioById(portfolioId);
                    validPortfolioIds.add(portfolioId);
                    return portfolio;
                } catch (Exception e) {
                    System.out.printf("‚ö†Ô∏è –ü–æ–º–∏–ª–∫–∞ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –ø–æ—Ä—Ç—Ñ–µ–ª—è –∑ ID %s: %s%n", portfolioId,
                        e.getMessage());
                    return null;
                }
            })
            .filter(Objects::nonNull)
            .peek(portfolio -> {
                try {
                    portfolioService.calculateTotalValue(portfolio);
                } catch (Exception e) {
                    System.out.printf("‚ö†Ô∏è –ü–æ–º–∏–ª–∫–∞ –ø—ñ–¥—Ä–∞—Ö—É–Ω–∫—É –≤–∞—Ä—Ç–æ—Å—Ç—ñ –ø–æ—Ä—Ç—Ñ–µ–ª—è %s: %s%n",
                        portfolio.getName(), e.getMessage());
                }
            })
            .sorted(Comparator.comparing(p -> p.getTotalValue().doubleValue(),
                Comparator.reverseOrder()))
            .collect(Collectors.toList());

        user.setPortfolios(new HashSet<>(validPortfolioIds));
        authService.updateUser(user);

        return portfolios;
    }

    /**
     * –°—Ç–≤–æ—Ä—é—î –Ω–æ–≤–∏–π –ø–æ—Ä—Ç—Ñ–µ–ª—å –¥–ª—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –∑ —É–Ω—ñ–∫–∞–ª—å–Ω–æ—é –Ω–∞–∑–≤–æ—é.
     *
     * @param currentUser –ø–æ—Ç–æ—á–Ω–∏–π –∞–≤—Ç–µ–Ω—Ç–∏—Ñ—ñ–∫–æ–≤–∞–Ω–∏–π –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á.
     */
    private void createPortfolio(User currentUser) {
        System.out.print("\uD83D\uDCBC –í–≤–µ–¥—ñ—Ç—å –Ω–∞–∑–≤—É –Ω–æ–≤–æ–≥–æ –ø–æ—Ä—Ç—Ñ–µ–ª—è: ");
        String name = scanner.nextLine().trim();

        if (name.isEmpty()) {
            System.out.println("‚ö†Ô∏è –ü–æ–º–∏–ª–∫–∞: –ù–∞–∑–≤–∞ –ø–æ—Ä—Ç—Ñ–µ–ª—è –Ω–µ –º–æ–∂–µ –±—É—Ç–∏ –ø–æ—Ä–æ–∂–Ω—å–æ—é.");
            return;
        }

        try {
            PortfolioAddDto portfolioAddDto = new PortfolioAddDto(
                UUID.randomUUID(),
                currentUser.getId(),
                name,
                Map.of(),
                Set.of()
            );

            Portfolio newPortfolio = portfolioService.addPortfolio(portfolioAddDto);
            currentUser.getPortfolios().add(newPortfolio.getId());
            authService.updateUser(currentUser);

            System.out.printf("\uD83D\uDCBC –ü–æ—Ä—Ç—Ñ–µ–ª—å '%s' —É—Å–ø—ñ—à–Ω–æ —Å—Ç–≤–æ—Ä–µ–Ω–æ.%n",
                newPortfolio.getName());
        } catch (IllegalArgumentException e) {
            System.out.println("\n‚ö†Ô∏è –í–∏—è–≤–ª–µ–Ω–æ –ø–æ–º–∏–ª–∫–∏:");
            String[] errorMessages = e.getMessage()
                .replace("[", "")
                .replace("]", "")
                .split(",");
            for (String error : errorMessages) {
                System.out.printf("‚ùå %s%n", error.trim());
            }
        } catch (Exception e) {
            System.out.printf("‚ö†Ô∏è –ù–µ–æ—á—ñ–∫—É–≤–∞–Ω–∞ –ø–æ–º–∏–ª–∫–∞: %s%n", e.getMessage());
        }
    }

    private void calculatePortfolioChange(Portfolio portfolio) {
        AtomicReference<BigDecimal> totalValueChange24h = new AtomicReference<>(BigDecimal.ZERO);

        portfolio.getBalances().forEach((symbol, balance) -> {
            Optional<Cryptocurrency> cryptoOpt = findCryptocurrency(symbol);

            if (cryptoOpt.isPresent()) {
                Cryptocurrency crypto = cryptoOpt.get();

                // –û—Ç—Ä–∏–º–∞–Ω–Ω—è –≤–∞—Ä—Ç–æ—Å—Ç—ñ –º–æ–Ω–µ—Ç–∏
                BigDecimal cryptoValue = BigDecimal.valueOf(crypto.getCurrentPrice())
                    .multiply(balance);

                // –†–æ–∑—Ä–∞—Ö—É–Ω–æ–∫ –∑–º—ñ–Ω–∏ –∑–∞ 24 –≥–æ–¥–∏–Ω–∏
                BigDecimal cryptoChange24h = cryptoValue
                    .multiply(BigDecimal.valueOf(crypto.getPercentChange24h()))
                    .divide(BigDecimal.valueOf(100), RoundingMode.HALF_UP);

                // –î–æ–¥–∞–≤–∞–Ω–Ω—è –∑–º—ñ–Ω–∏ –¥–æ –∑–∞–≥–∞–ª—å–Ω–æ—ó –∑–º—ñ–Ω–∏
                totalValueChange24h.updateAndGet(v -> v.add(cryptoChange24h));
            }
        });

        // –ó–∞–≥–∞–ª—å–Ω–∞ –∑–º—ñ–Ω–∞ –≤–∞—Ä—Ç—ñ—Å—Ç—é —Ç–∞ —É –≤—ñ–¥—Å–æ—Ç–∫–∞—Ö
        BigDecimal totalPortfolioValue = portfolio.getTotalValue();
        BigDecimal percentChange24h = totalValueChange24h.get()
            .divide(totalPortfolioValue, RoundingMode.HALF_UP)
            .multiply(BigDecimal.valueOf(100));

        // –í–∏–≤–µ–¥–µ–Ω–Ω—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ñ–≤
        System.out.printf(
            "–ó–º—ñ–Ω–∞ –ø–æ—Ä—Ç—Ñ–µ–ª—è –∑–∞ 24 –≥–æ–¥–∏–Ω–∏: %.2f$ (%.2f%%)%n",
            totalValueChange24h.get(),
            percentChange24h
        );
    }


    private void viewPortfolioDetails(Portfolio portfolio) {
        while (true) {
            AtomicReference<BigDecimal> totalValueChange24h = new AtomicReference<>(
                BigDecimal.ZERO);

            portfolio.getBalances().forEach((symbol, balance) -> {
                Optional<Cryptocurrency> cryptoOpt = findCryptocurrency(symbol);

                if (cryptoOpt.isPresent()) {
                    Cryptocurrency crypto = cryptoOpt.get();

                    BigDecimal cryptoValue = BigDecimal.valueOf(crypto.getCurrentPrice())
                        .multiply(balance);

                    BigDecimal cryptoChange24h = cryptoValue
                        .multiply(BigDecimal.valueOf(crypto.getPercentChange24h()))
                        .divide(BigDecimal.valueOf(100), RoundingMode.HALF_UP);

                    totalValueChange24h.updateAndGet(v -> v.add(cryptoChange24h));
                }
            });

            BigDecimal totalPortfolioValue = portfolio.getTotalValue();
            BigDecimal percentChange24h = totalPortfolioValue.compareTo(BigDecimal.ZERO) > 0
                ? totalValueChange24h.get()
                .divide(totalPortfolioValue, RoundingMode.HALF_UP)
                .multiply(BigDecimal.valueOf(100))
                : BigDecimal.ZERO;

            BigDecimal totalPnl = portfolio.calculateTotalPnl();
            System.out.println("\nüìä –ê–ù–ê–õ–Ü–¢–ò–ö–ê –ü–û–†–¢–§–ï–õ–Ø: " + portfolio.getName());
            System.out.println("‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ");
            System.out.printf("üí∞ –ó–∞–≥–∞–ª—å–Ω–∞ –≤–∞—Ä—Ç—ñ—Å—Ç—å: $%.2f%n", totalPortfolioValue);
            BigDecimal change = percentChange24h;
            String changeEmoji = change.compareTo(BigDecimal.ZERO) > 0 ? "üü¢" :
                (change.compareTo(BigDecimal.ZERO) < 0 ? "üî¥" : "‚ö™");
            System.out.printf("%s –ó–º—ñ–Ω–∞ (24–≥): $%.2f (%.2f%%)%n",
                changeEmoji,
                totalValueChange24h.get(),
                percentChange24h);
            System.out.printf("üìà –ó–∞–≥–∞–ª—å–Ω–∏–π PNL: $%.2f%n", totalPnl);
            System.out.printf("ü™ô –ö—ñ–ª—å–∫—ñ—Å—Ç—å –∞–∫—Ç–∏–≤—ñ–≤: %d%n", portfolio.getBalances().size());
            System.out.println("\nüìã –°–ü–ò–°–û–ö –ê–ö–¢–ò–í–Ü–í");
            System.out.println("‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ");
            System.out.printf("%-4s %-15s %-8s %-12s %-10s %-15s %-15s %-10s %-10s%n",
                "#", "–ù–∞–∑–≤–∞", "–¢—ñ–∫–µ—Ä", "–¶—ñ–Ω–∞ USD", "–ö—ñ–ª—å–∫—ñ—Å—Ç—å", "–û–±'—î–º 24–≥",
                "–ö–∞–ø—ñ—Ç–∞–ª—ñ–∑–∞—Ü—ñ—è", "–ó–º—ñ–Ω–∞ 24–≥", "PNL USD");
            System.out.println("‚îÅ".repeat(100));

            /*
            System.out.printf("\n=== –ü–æ—Ä—Ç—Ñ–µ–ª—å: %s ===\n", portfolio.getName());
            System.out.printf("–í–∞—Ä—Ç—ñ—Å—Ç—å –ø–æ—Ä—Ç—Ñ–µ–ª—è: %.2f$\n", totalPortfolioValue);
            System.out.printf("–ó–º—ñ–Ω–∞ –∑–∞ 24 –≥–æ–¥–∏–Ω–∏: %.2f$ (%.2f%%)\n",
                totalValueChange24h.get(),
                percentChange24h);
            System.out.printf("–ó–∞–≥–∞–ª—å–Ω–∏–π PNL: %.2f$\n", totalPnl);
            System.out.printf("–ö—ñ–ª—å–∫—ñ—Å—Ç—å –º–æ–Ω–µ—Ç —É –ø–æ—Ä—Ç—Ñ–µ–ª—ñ: %d\n", portfolio.getBalances().size());

            System.out.printf("%-5s %-15s %-10s %-15s %-10s %-20s %-25s %-10s %-10s%n",
                "#", "–ú–æ–Ω–µ—Ç–∞", "–°–∏–º–≤–æ–ª", "–¶—ñ–Ω–∞ (USD)", "–ë–∞–ª–∞–Ω—Å", "–û–±—Å—è–≥ 24–≥ (USD)",
                "–†–∏–Ω–∫–æ–≤–∞ –∫–∞–ø—ñ—Ç–∞–ª—ñ–∑–∞—Ü—ñ—è", "–ó–º—ñ–Ω–∞ 24–≥ (%)", "PNL (USD)");

             */

            if (portfolio.getBalances().isEmpty()) {
                System.out.println("\uD83D\uDCBC –ü–æ—Ä—Ç—Ñ–µ–ª—å –ø–æ—Ä–æ–∂–Ω—ñ–π");
            } else {
                int index = 1;
                for (Map.Entry<String, BigDecimal> entry : portfolio.getBalances().entrySet()) {
                    String symbol = entry.getKey();
                    BigDecimal balance = entry.getValue();

                    Optional<Cryptocurrency> cryptoOpt = findCryptocurrency(symbol);
                    if (cryptoOpt.isPresent()) {
                        Cryptocurrency crypto = cryptoOpt.get();

                        BigDecimal pnl = portfolio.calculatePnlForCryptocurrency(symbol);

                        System.out.printf(
                            "%-4d %-15s %-8s $%-11.2f %-10.4f $%-14.2f $%-14.2f %s%-9.2f $%-9.2f%n",
                            index++,
                            crypto.getName(),
                            crypto.getSymbol(),
                            crypto.getCurrentPrice(),
                            balance,
                            crypto.getVolume24h(),
                            crypto.getMarketCap(),
                            (crypto.getPercentChange24h() > 0 ? "+" : ""),
                            crypto.getPercentChange24h(),
                            pnl);
                    } else {
                        System.out.printf("%-4d %-15s %-8s ‚ö†Ô∏è –î–∞–Ω—ñ —Ç–∏–º—á–∞—Å–æ–≤–æ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ñ%n",
                            index++, symbol, symbol);
                    }
                }
            }

            System.out.println("\n‚öôÔ∏è –£–ü–†–ê–í–õ–Ü–ù–ù–Ø –ü–û–†–¢–§–ï–õ–ï–ú");
            System.out.println("‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ");
            System.out.println("0. üîô –ü–æ–≤–µ—Ä–Ω—É—Ç–∏—Å—è");
            System.out.println("T. üí± –ù–æ–≤–∞ —Ç—Ä–∞–Ω–∑–∞–∫—Ü—ñ—è");
            System.out.println("H. üìú –Ü—Å—Ç–æ—Ä—ñ—è —Ç—Ä–∞–Ω–∑–∞–∫—Ü—ñ–π");
            System.out.println("‚ûï –î–æ–¥–∞—Ç–∏ –∞–∫—Ç–∏–≤");
            System.out.println("‚ûñ –í–∏–¥–∞–ª–∏—Ç–∏ –∞–∫—Ç–∏–≤");
            System.out.print("‚ú® –û–±–µ—Ä—ñ—Ç—å –æ–ø—Ü—ñ—é: ");
            String input = scanner.nextLine().trim().toLowerCase();

            switch (input) {
                case "0" -> {
                    return;
                }
                case "t" -> {
                    TransactionsView transactionsView = new TransactionsView(portfolio.getId());
                    transactionsView.display();
                }
                case "h" -> {
                    TransactionHistoryView transactionHistoryView = new TransactionHistoryView(
                        portfolio.getId());
                    transactionHistoryView.display();
                }
                case "+" -> addCryptocurrencyToPortfolio(portfolio);
                case "-" -> removeCryptocurrencyFromPortfolio(portfolio);
                default -> System.out.println("\uD83D\uDCBC –ù–µ–≤—ñ—Ä–Ω–∏–π –≤–∏–±—ñ—Ä. –°–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑.");
            }
        }
    }

    /**
     * –î–æ–¥–∞—î –∞–∫—Ç–∏–≤ (–∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç—É) –¥–æ –æ–±—Ä–∞–Ω–æ–≥–æ –ø–æ—Ä—Ç—Ñ–µ–ª—è.
     *
     * @param portfolio –æ–±—Ä–∞–Ω–∏–π –ø–æ—Ä—Ç—Ñ–µ–ª—å.
     */
    private void addCryptocurrencyToPortfolio(Portfolio portfolio) {
        System.out.print("üîç –í–≤–µ–¥—ñ—Ç—å —Ç—ñ–∫–µ—Ä –∞–±–æ –Ω–∞–∑–≤—É –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç–∏: ");
        String input = scanner.nextLine().trim()
            .toUpperCase();

        Optional<Cryptocurrency> cryptoOpt = findCryptocurrency(input);
        if (cryptoOpt.isPresent()) {
            Cryptocurrency crypto = cryptoOpt.get();
            String normalizedSymbol = crypto.getSymbol().toUpperCase();

            if (portfolio.getBalances().containsKey(normalizedSymbol)) {
                System.out.println("‚ö†Ô∏è –¶–µ–π –∞–∫—Ç–∏–≤ –≤–∂–µ —î —É –ø–æ—Ä—Ç—Ñ–µ–ª—ñ");
                return;
            }

            portfolio.getBalances().put(normalizedSymbol, BigDecimal.ZERO);
            portfolioService.calculateTotalValue(portfolio);
            System.out.printf("‚úÖ %s —É—Å–ø—ñ—à–Ω–æ –¥–æ–¥–∞–Ω–æ –¥–æ –ø–æ—Ä—Ç—Ñ–µ–ª—è '%s'%n",
                crypto.getName(), portfolio.getName());
        } else {
            System.out.printf("‚ùå –ê–∫—Ç–∏–≤ %s –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ%n", input);
        }
    }

    private Optional<Cryptocurrency> findCryptocurrency(String input) {
        String normalizedInput = input.toUpperCase();
        Optional<Cryptocurrency> cryptoOpt = cryptocurrencyRepository.findBySymbol(normalizedInput);
        if (cryptoOpt.isPresent()) {
            return cryptoOpt;
        }
        return cryptocurrencyRepository.findByName(input);
    }

    /**
     * –í–∏–¥–∞–ª—è—î –∞–∫—Ç–∏–≤ (–∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç—É) –∑ –æ–±—Ä–∞–Ω–æ–≥–æ –ø–æ—Ä—Ç—Ñ–µ–ª—è.
     *
     * @param portfolio –æ–±—Ä–∞–Ω–∏–π –ø–æ—Ä—Ç—Ñ–µ–ª—å.
     */
    private void removeCryptocurrencyFromPortfolio(Portfolio portfolio) {
        System.out.print("‚ú® –í–≤–µ–¥—ñ—Ç—å —Å–∏–º–≤–æ–ª –∞–±–æ –Ω–∞–∑–≤—É –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç–∏ –¥–ª—è –≤–∏–¥–∞–ª–µ–Ω–Ω—è: ");
        String input = scanner.nextLine().trim().toUpperCase();

        Optional<Cryptocurrency> cryptoOpt = findCryptocurrency(input);
        if (cryptoOpt.isEmpty()) {
            System.out.printf("\uD83D\uDCBC –ü–æ–º–∏–ª–∫–∞: –î–∞–Ω—ñ –ø—Ä–æ –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç—É %s –≤—ñ–¥—Å—É—Ç–Ω—ñ.%n", input);
            return;
        }

        Cryptocurrency crypto = cryptoOpt.get();
        String normalizedSymbol = crypto.getSymbol().toUpperCase();
        if (!portfolio.getBalances().containsKey(normalizedSymbol)) {
            System.out.println("\uD83D\uDCBC –ü–æ–º–∏–ª–∫–∞: –ö—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç–∞ –≤—ñ–¥—Å—É—Ç–Ω—è —É –ø–æ—Ä—Ç—Ñ–µ–ª—ñ.");
            return;
        }

        portfolio.getBalances().remove(normalizedSymbol);
        portfolioService.calculateTotalValue(portfolio);
        System.out.printf("‚úÖ %s —É—Å–ø—ñ—à–Ω–æ –≤–∏–¥–∞–ª–µ–Ω–æ –∑ –ø–æ—Ä—Ç—Ñ–µ–ª—è '%s'%n",
            crypto.getName(), portfolio.getName());
    }

}
